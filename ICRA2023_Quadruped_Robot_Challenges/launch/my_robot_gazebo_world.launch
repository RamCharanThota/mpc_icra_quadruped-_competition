<!-- -->
<launch>

    <!-- these are the arguments you can pass this launch file, for example paused:=true -->
    <arg name="paused" default="true"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="gui" default="true"/>
    <arg name="headless" default="false"/>
    <!-- Enable gazebo state log recording -->
    <arg name="debug" default="false"/>
    <arg name="course" default="easy"/> <!-- choose hard or easy -->
    <arg name="rname" default="go1"/>
    <arg name="dollar" value="$"/>
    <!-- Debug mode will hung up the robot, use "true" or "false" to switch it. -->
    <arg name="user_debug" default="false"/>

    <arg name="node_start_delay" default="2.0" />  

    <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find ICRA2023_Quadruped_Competition)/worlds/competition.world"/>
        <arg name="debug" value="$(arg debug)" />
        <arg name="gui" value="$(arg gui)" />
        <arg name="paused" value="$(arg paused)"/>
        <arg name="use_sim_time" value="$(arg use_sim_time)"/>
        <arg name="headless" value="$(arg headless)"/>
    </include>

    <!-- Load the URDF into the ROS Parameter Server -->
    <param name="map_description" command="$(find xacro)/xacro --inorder '$(find ICRA2023_Quadruped_Competition)/urdf/map.urdf.xacro' course:=$(arg course)" />

    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -param map_description -model competition_map" />

    <!-- launch the robot in the gazebo world of competition  -->
    <include file="$(find go1_description)/launch/$(arg rname)_rviz_gazebo.launch">
        <arg name="user_debug" value="$(arg user_debug)"/>
        <arg name="rviz" value="false"/>
    </include>
     <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
    <!-- <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model $(arg rname)_robot" /> -->

    <!-- Set trunk and joint positions at startup -->
    <node pkg="gazebo_ros" type="spawn_model" name="urdf_spawner" respawn="false" output="screen"
          args="-urdf -z 0.6 -model $(arg rname)_gazebo -param robot_description -unpause"/>

    <!-- Load joint controller configurations from YAML file to parameter server -->
    <rosparam file="$(find go1_description)/config/robot_control.yaml" command="load"/>

    <!-- load the controllers -->
    <node pkg="controller_manager" type="spawner" name="controller_spawner" respawn="false"
          output="screen" ns="/$(arg rname)_gazebo" args="joint_state_controller
          FL_hip_controller FL_thigh_controller FL_calf_controller
          FR_hip_controller FR_thigh_controller FR_calf_controller
          RL_hip_controller RL_thigh_controller RL_calf_controller
          RR_hip_controller RR_thigh_controller RR_calf_controller "/>

    <!-- convert joint states to TF transforms for rviz, etc -->
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher"
          respawn="false" output="screen">
        <remap from="/joint_states" to="/$(arg rname)_gazebo/joint_states"/>
    </node>

    <!-- <node pkg="unitree_gazebo" type="servo" name="servo" required="true" output="screen"/> -->

    <!-- load the parameter unitree_controller -->
    <include file="$(find unitree_controller)/launch/set_ctrl.launch">
        <arg name="rname" value="$(arg rname)"/>
    </include>

    <!-- delaying the launching of the controller -->

    
    <node name="listener" pkg="roscpp_tutorials" type="listener" launch-prefix="bash -c 'sleep $(arg node_start_delay); $0 $@' " />

    <!-- launch the controller -->
    <node pkg="unitree_guide" type="junior_ctrl" name="junior_controller"
          respawn="false" output="screen">
    </node>




</launch>
